#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 17 15:48:04 2018

@author: lydiayu
"""



def my_calc(x, b):
    """  x: a positive integer
         b: a positive integer; b >= 2
    Returns an integer n, where n is the largest power 
    of b such that b**n is less than or equal to x. """
    
#    print(my_ calc(16,2)) # prints 4
#    print(my_ calc(15, 3)) # prints 2
    
    n = 0
    while(b**n <= x):
        n+=1
        
    return n-1

def get_sublists(L, n):
    """ L: a non-empty list of ints
        n: an int
    Raises a ValueError if the list contains less than n elements.
    Returns a list of all possible sublists consisting of n consecutive elements of L. 
    The sublists in the returned list are ordered in the way they appear in L.  """
    
    if len(L) < n:
        return "ValueError raised"
    allsublists = []
    for i in range(0, n):
        sublist = []
        for x in range(i, i + n):
            sublist.append(L[x])
        allsublists.append(sublist)
  
    return allsublists
#    L = [9,3,5,1,9]
#    n = 3
#    print(get_sublists(L, n)) # prints the list [[9,3,5], [3,5,1], [5,1,9]]
    

def common(Ld):
    """ Ld: a list of dictionaries mapping keys to ints
    Returns a new dictionary d_new. 
    The keys in d_new are the shared keys that occur in all of the dictionaries in Ld. 
    The value in d_new for a key is the maximum of the values associated with that key.  
    """
#    d_new = {}
#    for i in Ld:
#        if i.getKey() == 
    
#    d1 = {1:12, 3:4, 2:5}
#    d2 = {1:6, 3:8, 0:9}
#    d3 = {3:0, 1:11, 2:3}
#    Ld = [d1, d2, d3]
#    print(common(Ld)) # prints the dictionary {1:12, 3:8} 
  
      
def binary_to_int(s):
    """
    s: str made up of 0 and 1 characters, representing a binary number.
    Converts s to its whole number representation in base 10, and returns it as a string.
    """
#    num = 0
#    for x in range(len(s)):
#        num += int(s[x]) * (2**(len(s)-x))
#    num = int(num/2)
#    return str(num)
    return str(int(s, 2))
    s = "0001101"
    print(binary_to_int(s)) # prints the string '13'  